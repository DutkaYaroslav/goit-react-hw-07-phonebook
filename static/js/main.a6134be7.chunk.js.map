{"version":3,"sources":["redux/contacts/contactsAction.js","redux/contacts/contactsOperation.js","components/ContactForm/ContactForm.js","redux/contacts/contactsSelectors.js","components/ContactList/ContactList.js","App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["addTaskRequest","createAction","nameResult","numberResult","name","number","addTaskSuccess","addTaskError","getFetchRequest","getFetchSuccess","getFetchError","removeContactRequest","removeContactSuccess","removeContactError","nameCheck","addTask","disPatch","contactsAction","axios","post","competed","then","response","data","catch","error","fetchContacts","dispatch","get","removeContact","id","delete","ContactForm","state","handleChange","e","target","value","setState","onSubmit","preventDefault","props","onAddTask","className","this","type","onChange","Component","mapDispatchToProps","contactsOperation","connect","getFilter","contacts","filter","getLoadingTasks","loading","getVisible","createSelector","task","toLowerCase","includes","onRemove","onVisible","contactsSelectors","component","map","visibleTask","key","classNames","timeout","onClick","App","onFetchContacts","isLoadingTasks","contactsTools","createReducer","action","payload","contact","filterTools","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6134be7.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addTaskRequest = createAction(\r\n  'contacts/request',\r\n  (nameResult, numberResult) => ({\r\n    name: nameResult,\r\n    number: numberResult,\r\n  }),\r\n);\r\nconst addTaskSuccess = createAction('contacts/success');\r\nconst addTaskError = createAction('contacts/error');\r\n\r\nconst getFetchRequest = createAction('contacts/getFetchRequest');\r\nconst getFetchSuccess = createAction('contacts/getFetchSuccess');\r\nconst getFetchError = createAction('contacts/getFetchError');\r\n\r\nconst removeContactRequest = createAction('contacts/removeContactRequest');\r\nconst removeContactSuccess = createAction('contacts/removeContactSuccess');\r\nconst removeContactError = createAction('contacts/removeContactError');\r\n\r\n// const removeTask = createAction('contacts/remove');\r\n\r\nconst nameCheck = createAction('contacts/check');\r\n\r\nexport default {\r\n  addTaskRequest,\r\n  addTaskSuccess,\r\n  addTaskError,\r\n\r\n  getFetchRequest,\r\n  getFetchSuccess,\r\n  getFetchError,\r\n\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n\r\n  // removeTask,\r\n  nameCheck,\r\n};\r\n","import contactsAction from './contactsAction';\r\nimport axios from 'axios';\r\n\r\nconst addTask = (name, number) => disPatch => {\r\n  disPatch(contactsAction.addTaskRequest());\r\n\r\n  axios\r\n    .post('http://localhost:2000/contacts', { name, number, competed: false })\r\n    .then(response => {\r\n      disPatch(contactsAction.addTaskSuccess(response.data));\r\n    })\r\n    .catch(error => disPatch(contactsAction.addTaskError()));\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactsAction.getFetchRequest());\r\n\r\n  axios\r\n    .get('http://localhost:2000/contacts')\r\n    .then(({ data }) => dispatch(contactsAction.getFetchSuccess(data)))\r\n    .catch(error => dispatch(contactsAction.getFetchError(error)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsAction.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`http://localhost:2000/contacts/${id}`)\r\n    .then(() => dispatch(contactsAction.removeContactSuccess(id)))\r\n    .catch(error => dispatch(contactsAction.removeContactError(error)));\r\n};\r\n\r\nexport default {\r\n  addTask,\r\n  fetchContacts,\r\n  removeContact,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsAction from '../../redux/contacts/contactsAction';\r\nimport './ContactForm.css';\r\nimport contactsOperation from '../../redux/contacts/contactsOperation';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAddTask(this.state.name, this.state.number);\r\n\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contact-form\">\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"contact-form_style\">\r\n            <p className=\"contact-form_description\">Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n              className=\"contact-form_label\"\r\n            ></input>\r\n            <p className=\"contact-form_description\">Number</p>\r\n            <input\r\n              onChange={this.handleChange}\r\n              value={this.state.number}\r\n              name=\"number\"\r\n            ></input>\r\n          </div>\r\n\r\n          <button type=\"submit\" className=\"contact-form_button\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddTask: contactsOperation.addTask,\r\n  handleChange: contactsAction.nameCheck,\r\n};\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoadingTasks = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getContacts = state => state.contacts.contacts;\r\n\r\nconst getVisible = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(task => task.name.toLowerCase().includes(filter));\r\n  },\r\n);\r\n// const getVisible = state => {\r\n//   const contacts = getContacts(state);\r\n//   const filter = getFilter(state).toLowerCase();\r\n\r\n//   return contacts.filter(task => task.name.toLowerCase().includes(filter));\r\n// };\r\n\r\nexport default {\r\n  getLoadingTasks,\r\n  getFilter,\r\n  getVisible,\r\n};\r\n","import React from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport contactsAction from '../../redux/contacts/contactsAction';\r\nimport contactsOperation from '../../redux/contacts/contactsOperation';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\n\r\nimport './ContactList.css';\r\n\r\nconst Contacts = ({ value, onChange, onVisible, onRemove }) => (\r\n  <div className=\"find-input\">\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        onChange={e => onChange(e.target.value)}\r\n        value={value}\r\n        name=\"filter\"\r\n      ></input>\r\n    </label>\r\n    <TransitionGroup component=\"ul\">\r\n      {onVisible.map(visibleTask => (\r\n        <CSSTransition key={visibleTask.id} classNames=\"list\" timeout={250}>\r\n          <li className=\"name-list\">\r\n            {visibleTask.name}:{visibleTask.number}\r\n            <button\r\n              type=\"button\"\r\n              className=\"close-button\"\r\n              onClick={() => onRemove(visibleTask.id)}\r\n            >\r\n              delete\r\n            </button>\r\n          </li>\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  onVisible: contactsSelectors.getVisible(state),\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onRemove: contactsOperation.removeContact,\r\n  onChange: contactsAction.nameCheck,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactList/ContactList';\n// import { CSSTransition } from 'react-transition-group';\nimport './App.css';\nimport contactsOperation from './redux/contacts/contactsOperation';\nimport contactsSelectors from './redux/contacts/contactsSelectors';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"phonebook\">\n          <h2 className=\"phonebook-head\">Phonebook</h2>\n        </div>\n        <ContactForm />\n        <h2 className=\"contacts-styles\">Contacts</h2>\n\n        <ContactsList />\n        {this.props.isLoadingTasks && <h1 className=\"loading\">Loading</h1>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingTasks: contactsSelectors.getLoadingTasks(state),\n});\n\nconst mapDispatchToProps = {\n  onFetchContacts: contactsOperation.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsAction from './contactsAction';\r\n// import contactsOperation from './contactsOperation';\r\n\r\nconst contactsTools = createReducer([], {\r\n  [contactsAction.addTaskSuccess]: (state, action) => [\r\n    ...state,\r\n    action.payload,\r\n  ],\r\n  [contactsAction.getFetchSuccess]: (state, action) => action.payload,\r\n  [contactsAction.removeContactSuccess]: (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsAction.addTaskRequest]: () => true,\r\n  [contactsAction.addTaskSuccess]: () => false,\r\n  [contactsAction.addTaskError]: () => false,\r\n});\r\n\r\nconst filterTools = createReducer('', {\r\n  [contactsAction.nameCheck]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts: contactsTools,\r\n  filter: filterTools,\r\n  loading: loading,\r\n});\r\n","// import { combineReducers } from 'redux';\r\nimport contactsReducer from './contacts/contactsReducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}